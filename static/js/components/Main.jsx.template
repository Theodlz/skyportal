// Baselayer components
import { Notifications } from "baselayer/components/Notifications";

// React and Redux
import React, { useEffect, Suspense } from "react";
import PropTypes from "prop-types";
import { Provider, useSelector } from "react-redux";
import { createRoot } from 'react-dom/client';

import { BrowserRouter, Routes, Route, useLocation, useParams } from "react-router-dom";

import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers';
import {
  createTheme,
  ThemeProvider,
  StyledEngineProvider,
  useTheme,
} from "@mui/material/styles";
import makeStyles from "@mui/styles/makeStyles";
import { isMobile } from "react-device-detect";
import Spinner from "./Spinner";

import DayJSUtils from "@date-io/dayjs";
import clsx from "clsx";

// WebSocket
import WebSocket from "baselayer/components/WebSocket";
import messageHandler from "baselayer/MessageHandler";

// Store
import store from "../store";

// Actions
import hydrate from "../actions";
import * as rotateLogoActions from "../ducks/logo";

import NoMatchingRoute from "./NoMatchingRoute";

{% for route in app.routes -%}
const {{ route.component }} = React.lazy(() => import("./{{ route.component }}"));
{% endfor %}

import Theme from "./Theme";
import SidebarAndHeader from "./SidebarAndHeader";
import ErrorBoundary from "./ErrorBoundary";

messageHandler.init(store.dispatch, store.getState);

const useStyles = makeStyles((theme) => ({
  content: {
    flexGrow: 1,
    padding: theme.spacing(2),
    transition: theme.transitions.create("margin", {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    marginTop: "4em", // top bar height
    marginLeft: isMobile ? "0" : "190px",
    "& a": {
      textDecoration: "none",
      color: "gray",
      fontWeight: "bold",
    },
  },
  contentShift: {
    transition: theme.transitions.create("margin", {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen,
    }),
    marginLeft: 0,
  },
  websocket: {
    display: "none",
  }
}));

const MainContent = ({ root }) => {

  const theme = useTheme();
  return (
    <ThemeProvider theme={theme}>
      <MainContentInternal root={root} />
    </ThemeProvider>
  )

};

const MainContentInternal = ({ root }) => {
  const { open } = useSelector((state) => state.sidebar);

  const classes = useStyles();
  const theme = useTheme();

  useEffect(() => {
    store.dispatch(rotateLogoActions.rotateLogo());
    setTimeout(() => {
      const sysInfo = store.getState().sysInfo;
      if (!sysInfo.version) {
        store.dispatch(hydrate());
        store.dispatch(rotateLogoActions.rotateLogo());
      }
    }, 1500);
  }, []);

  const location = useLocation();
  useEffect(() => {
    document.title = "{{ app.title }}";
  }, [location]);

  return (
   <StyledEngineProvider injectFirst>
     <Theme {% if testing %} disableTransitions {% endif %}>

      <div>
        <WebSocket
          url={`${window.location.protocol === "https:" ? "wss" :
          "ws"}://${root}websocket`}
          auth_url={`${window.location.protocol}//${root}baselayer/socket_auth_token`}
          messageHandler={messageHandler}
          dispatch={store.dispatch}
        />
      </div>

      <LocalizationProvider dateAdapter={AdapterDateFns}>
        <SidebarAndHeader open={open} />

        <div
          role="main"
          className={clsx(classes.content, {
            [classes.contentShift]: !open,
          })}
        >

          <Notifications />

          <Routes>

            {%- for route in app.routes %}
            <Route path="{{ route.path }}" element={{ "{<Suspense fallback={<Spinner />}><" }}{{ route.component }}{{ "/></Suspense>}" }} />
            {%- endfor %}

            <Route path="*" element={<NoMatchingRoute/>} />

          </Routes>

        </div>

      </LocalizationProvider>
    </Theme>
  </StyledEngineProvider>
  );
};

MainContent.propTypes = {
  root: PropTypes.string.isRequired
};

const container = document.getElementById("content");
const root = createRoot(container);

root.render(
  <Provider store={store}>
      <ErrorBoundary key={location.pathname}>
        <BrowserRouter basename="/">
          <MainContent root={`${window.location.host}/`} />
        </BrowserRouter>
      </ErrorBoundary>
  </Provider>
);
